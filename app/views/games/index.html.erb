<style>
  .disable {
    display: none;
  }

    #life-frame {
        margin: 0 auto;
        width: 80%;
        background-color: rgba(10, 0, 50, 0.6);
        display: flex;
        padding: 3px 3px;
    }

    #life-bar {
        height: 10px;
        background-color: rgb(0, 255, 255);
        transition: 300ms
    }

    #life-mark {
        width: 10px;
        height: 10px;
        border-radius: 3px;
        background-color: rgb(255, 255, 255);
        filter: saturate(500%);
        box-shadow: 0 0 5px 3px rgb(200, 255, 255),
                    0 0 7px 7px rgb(100, 255, 255);
    }

</style>

    <h1>戦闘画面</h1>
    <p>モンスター名</p>
    <p><%= @monster.name%></p>

    <button class="start">呪文を唱える</button>
    <button class="finish disable">終了</button>

    <div>
        <p class="phrase">ここに認識させたい文字が表示されます</p>
        <p class="result">ここに正解かどうか表示されます</p>
        <p class="output">ここに認識された音声が表示されます</p>
    </div>

    <div id="life-frame">
        <div id="life-bar"></div>
        <div id="life-mark"></div>
    </div>
        
<script>
var SpeechRecognition = SpeechRecognition || webkitSpeechRecognition;

var phrases = gon.names
var phrasePara = document.querySelector('.phrase');
var resultPara = document.querySelector('.result');
var recognizedSentences = document.querySelector('.output');

var startBtn = document.querySelector('.start');
var finishBtn = document.querySelector('.finish');
var count = 0

const lifeBar = document.getElementById('life-bar')         // ライフバー
const lifeMark = document.getElementById('life-mark')       // ライフの光部分
const increaseBtn = document.getElementById('increase-btn') // + ボタン
const decreaseBtn = document.getElementById('decrease-btn') // - ボタン
let life = 100                                              // ライフ初期値
lifeBar.style.width = "100%"                                // ライフ初期幅

function voiceInput() {
  startBtn.disabled = true;
  startBtn.textContent = '認識中';

  var phrase = phrases[count];
  phrasePara.textContent = phrase;
  resultPara.textContent = '正誤判定中';
  resultPara.style.background = 'rgba(0,0,0,0.2)';
  recognizedSentences.textContent = '音声認識中';

  var recognition = new SpeechRecognition();

  recognition.lang = 'ja-JP';

  recognition.interimResults = false;
  recognition.maxAlternatives = 1;

  recognition.start();

  recognition.onresult = function(event) {

    var speechResult = event.results[0][0].transcript;
    recognizedSentences.textContent = '「　' + speechResult + '　」' + 'という音声が認識されました';
    if(speechResult === phrase) {
      resultPara.textContent = 'モンスターはダメージを受けた!!';
      resultPara.style.background = 'lime';
      count++;

      	if (count < phrases.length) {
        startBtn.textContent = '次のターンへ';
        } else {
            //終了
            resultPara.textContent = 'モンスターはダメージを受けた!!工程が全て終了した';
            startBtn.classList.add("disable");
            finishBtn.classList.remove("disable");
            finishBtn.addEventListener('click', battleFinish);
        }

    } else {
      resultPara.textContent = '想定外の答えです';
      resultPara.style.background = 'red';
      startBtn.textContent = 'やり直す';
      alterLife( -25 )
    }
  }

  recognition.onspeechend = function() {
    recognition.stop();
    startBtn.disabled = false;
  }

  recognition.onerror = function(event) {
    startBtn.disabled = false;
    startBtn.textContent = 'やり直す';
    recognizedSentences.textContent = '入力時間オーバーなのでやり直してください';
  }
  
}

function battleFinish () {
    // 効果音
    resultPara.textContent = 'モンスターを倒した!!';
    finishBtn.textContent = '結果画面へ';
    finishBtn.addEventListener('click',function() {
        window.location.href = 'http://localhost:3000/admin/monsters'
    });
}

// *** ライフ変更処理 ***
function alterLife( value ){
    // lifeの値を算出する
    life += value 
    if ( life <= 0 ){
        // 算出の結果 0 以下になった場合
        life = 0
        // 0.3秒後に光部分を非表示にする
        setTimeout(function(){
            lifeMark.style.visibility = 'hidden'
        }, 300)
    } else {
        // 算出の結果 100 を超過した場合
        if ( life > 100 ) {
            life = 100
        }
        // 光部分を表示する
        lifeMark.style.visibility = 'visible'
    }
    // スタイル(幅)を更新する
    lifeBar.style.width = life + "%"
}

startBtn.addEventListener('click', voiceInput);

</script>
