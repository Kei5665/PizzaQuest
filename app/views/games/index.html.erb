<!-- Rounded Modal -->
<section>
  <dialog class="nes-dialog is-rounded" id="dialog-rounded">
    <form method="dialog">
      <h5 class="title text-center">Game Start!!</h5>
      <p class="text-center">モンスターが現れた!!</p>
      <button class="nes-btn is-primary w-100 battle-start">Start</button>
    </form>
  </dialog>
</section>

<button class="nes-btn mt-3" id="BGM">BGM</button>

    
      <div class="nes-table-responsive">
        <table class="nes-table is-bordered ms-auto">
          <thead>
            <tr>
              <th class="d-flex justify-content-between p-3">
                <p class="m-0">name:<%= @monster.name%></p>
                <p class="m-0">level:<%= @monster.level%></p>
              </th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td class="d-flex justify-content-between">
                <div>
                  <p class="m-0">HP:</p>
                </div>
                <div class="container">
                  <progress class="nes-progress is-error" id="life_monster" value="100" max="100"></progress>
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <div class="monster-img-box text-center">
        <i class="nes-mario my-4 mx-auto"></i>
      </div>

    <div class="user-box">
          <div class="nes-table-responsive">
        <table class="nes-table is-bordered is-centered">
          <thead>
            <tr>
              <th class="d-flex justify-content-between p-3">
                <p class="m-0">name:ユーザー</p>
                <p class="m-0">level:ビギナー</p>
              </th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td class="d-flex justify-content-between">
                <div>
                  <p class="m-0">HP:</p>
                </div>
                <div class="container">
                  <progress class="nes-progress is-success" id="life_user" value="100" max="100"></progress>
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>

<div class="nes-container is-rounded mt-3 text-center">
  <h2 class="encourage_to_speech">レシピを唱えろ!!</h2>
  <button class="start nes-btn is-primary">呪文を唱える</button>
  <button class="finish disable nes-btn is-success">終了</button>
  <button class="restart disable nes-btn is-error"></button>
  <%= link_to 'やり直す', games_path(:monster_id => @monster.id), class: "disable nes-btn is-error",id: "restart"%>
  <%= link_to '結果画面へ', games_result_path(:monster_id => @monster.id), class: "disable nes-btn is-success",id: "result"%>

    <div class="speech-result-box disable">
        <p class="phrase">ここに認識させたい文字が表示されます</p>
        <p class="result">ここに正解かどうか表示されます</p>
        <p class="output">ここに認識された音声が表示されます</p>
    </div>
</div>
<%= audio_tag 'correct.mp3', id: "correct" %>
<%= audio_tag 'damege.mp3', id: "damege" %>
<%= audio_tag 'clear.mp3', id: "clear" %>
<%= audio_tag 'gameover.mp3', id: "gameover" %>
<%= audio_tag 'battle.mp3',loop: true, id: "battle_music" %>
<%= audio_tag 'spel.mp3', id: "spel" %>
<%= audio_tag 'uncorrect.mp3', id: "uncorrect" %>
<script>
var battleStartBtn = document.querySelector('.battle-start');
var bgmBtn = document.querySelector('#BGM');

bgmBtn.addEventListener('click', startStop);
function startStop() {
  if (battle_music.paused) {
    battle_music.play();
  }  else {
    battle_music.pause();
  }
}

battleStartBtn.addEventListener('click', musicStart);
function musicStart() {
  battle_music.play();
}
</script>
<script>
var myModal = document.getElementById('dialog-rounded');
document.onreadystatechange = function () {
  myModal.showModal()
};
</script>
<script>
var SpeechRecognition = SpeechRecognition || webkitSpeechRecognition;

var phrases = gon.names
var user_attack_point = gon.user_attack_point
var phrasePara = document.querySelector('.phrase');
var resultPara = document.querySelector('.result');
var recognizedSentences = document.querySelector('.output');

var startBtn = document.querySelector('.start');
var finishBtn = document.querySelector('.finish');
var restartBtn = document.querySelector('#restart');
var resultLink = document.querySelector('#result');
var resultBox = document.querySelector('.speech-result-box');
var encourageSpeech = document.querySelector('.encourage_to_speech');
var count = 0

const lifeBar_user = document.getElementById('life_user')         // ライフバー
const lifeBar_monster = document.getElementById('life_monster')         // ライフバー
const increaseBtn = document.getElementById('increase-btn') // + ボタン
const decreaseBtn = document.getElementById('decrease-btn') // - ボタン
let life = 100                                              // ライフ初期値
let life_monster = 100                                              // ライフ初期値

function voiceInput() {

  resultBox.classList.remove("disable");
  encourageSpeech.classList.add("disable");
  startBtn.disabled = true;
  startBtn.textContent = '認識中';

  var phrase = phrases[count];
  phrasePara.textContent = phrase;
  resultPara.textContent = '正誤判定中';
  resultPara.style.background = 'rgba(0,0,0,0.2)';
  recognizedSentences.textContent = '音声認識中';

  var recognition = new SpeechRecognition();

  recognition.lang = 'ja-JP';

  recognition.interimResults = false;
  recognition.maxAlternatives = 1;

  recognition.start();

  recognition.onresult = function(event) {

    var speechResult = event.results[0][0].transcript;
    recognizedSentences.textContent = '「　' + speechResult + '　」' + 'という音声が認識されました';
    if(speechResult === phrase) {
      resultPara.textContent = '呪文を唱えた!!モンスターはダメージを受けた!!';
      resultPara.style.background = 'lime';
      alterLife_monster(user_attack_point);
      spel.play();
      damege.play();
      count++;

      	if (count < phrases.length) {
        startBtn.textContent = '次のターンへ';
        } else {
            //終了
            resultPara.textContent = '呪文を唱えた!!モンスターはダメージを受けた!!';
            lifeBar_monster.value = 0;
            battle_music.pause()
            startBtn.classList.add("disable");
            finishBtn.classList.remove("disable");
            finishBtn.addEventListener('click', battleFinish);
        }

    } else {
      resultPara.textContent = '呪文が正しくありません';
      resultPara.style.background = 'red';
      startBtn.textContent = 'やり直す';
      uncorrect.play();
      alterLife( -25 )
    }
  }

  recognition.onspeechend = function() {
    recognition.stop();
    startBtn.disabled = false;
  }

  recognition.onerror = function(event) {
    startBtn.disabled = false;
    startBtn.textContent = 'やり直す';
    recognizedSentences.textContent = '入力時間オーバーなのでやり直してください';
  }
  
}

function battleFinish () {
    // 効果音
    clear.play();
    resultPara.textContent = 'モンスターを倒した!!';
    finishBtn.classList.add("disable");
    resultLink.classList.remove("disable");
}

function gameOver () {
    // 効果音
    gameover.play();
    resultPara.textContent = '目の前が真っ暗になった';
    restartBtn.textContent = '最初からやり直す';
    finishBtn.classList.add("disable");
    restartBtn.classList.remove("disable")
}

// *** ライフ変更処理 ***
function alterLife( value ){
    // lifeの値を算出する
    life += value 
    if ( life <= 0 ){
        // 算出の結果 0 以下になった場合
        life = 0
        // ゲームオーバの表示
        resultPara.textContent = '体力が0になった';
        resultPara.style.background = 'red';
        startBtn.classList.add("disable");
        finishBtn.classList.remove("disable");
        finishBtn.addEventListener('click', gameOver);
      

    } else {
        // 算出の結果 100 を超過した場合
        if ( life > 100 ) {
            life = 100
        }
        // 光部分を表示する
    }
    // ライフバーの値を更新する
    lifeBar_user.value = life
}

function alterLife_monster( value ){
    // lifeの値を算出する
    life_monster -= value 
    if ( life_monster <= 0 ){
        // 算出の結果 0 以下になった場合
        life_monster = 0      
    } else {
        // 算出の結果 100 を超過した場合
        if ( life_monster > 100 ) {
            life_monster = 100
        }
    }
    // ライフバーの値を更新する
    lifeBar_monster.value = life_monster
}

startBtn.addEventListener('click', voiceInput);

</script>
